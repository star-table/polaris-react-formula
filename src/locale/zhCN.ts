export default {
  1: '请输入公式',
  2: '选择极星字段或函数',
  3: '确认',
  4: '取消',
  5: '极星字段',
  6: '公式样例',
  7: '填写变量、运算符和函数来组成公式进行运算',
  8: `引用极星字段：{字段ID}
使用运算符：2 * 5
使用函数：AVERAGE({数字列1}, {数字列2})
使用IF语句：IF(逻辑条件, "值1", "值2")`,
  9: `单价 * 数量
姓名 "-" 年纪
AVERAGE({数学}, {语文}, {英语})
IF({平均分} > 60, "👍", "❗")`,
  10: '逻辑',
  11: `判断是否满足某个条件，如果满足则返回第一个值，如果不满足则返回第二个值。

【logical】是逻辑条件，表示计算结果为真（true）和假（false）的表达式。
【value1】是当逻辑条件为真时的返回值。
【value2】是当逻辑条件为假时的返回值。

IF支持嵌套使用，并且可以用于检查单元格是否为空白/为空。`,
  12: `IF({分数} > 60, "及格", "不及格")

IF({水温} >  40, IF({水温} < 60, "刚刚好", "太热"), "太冷")

IF({Date} = "", "请输入日期", "日期已经输入")`,
  13: `如果所有参数均为真（true），则返回真（true），否则返回假（false）。

【logical】是逻辑参数，可以是逻辑值、数组或引用的极星字段`,
  14: `如果任何一个参数为真（true），则返回真（true），否则返回假（false）。

【logical】是逻辑参数，可以是逻辑值、数组或引用的极星字段。`,
  15: `反转其参数的逻辑值。

【boolean】是布尔参数，意味着你的输入值必须是逻辑判断且输出值只有真和假，比如比较两个值谁大谁小。
当你参数的逻辑判断为真（true）时函数返回假（false）；
当你参数的逻辑判断为假（false）时函数返回真（true）；description

如例子一：2>3输出值是假，但经过反转后函数输出值的是真。
如例子二：NOT({年纪} > 18)经过NOT函数反转后，其实相当于判断{年纪} ≤ 18`,
  16: 'NOT({年纪} > 18)',
  17: `本函数为多分支选择函数，它由表达式和多个分支+返回值组成，如果表达式等于某个分支值，则函数输出该分支对应的返回值。

【expression】是表达式，其运算的结果会与每个分支进行匹配。
【pattern】是分支，每个分支代表表达式的可能运算结果。每一个分支都有对应的返回值。
【result】是返回值，如果表达式的运算结果匹配了一个分支，则输出对应的返回值。
【default】是默认值，如果运算结果没有匹配任何一个分支，则函数输出默认值。默认值未填写时为空值。

比如例子一，{国家}是引用的一列数据，其输出值可能是成千上万个国家名称，它是该函数中的表达式。“中国”和“中文”分别为其中一条分支和返回值，它表示如果{国家}的输出值为“中国”时，则返回“中文”。而“通用英语”为默认值，它表示{国家}的输出值没有匹配任何分支时，则输出“通用英语”`,
  18: `SWITCH({国家}, "中国", "中文", "俄国", "俄语", "法国", "法语", "日本", "日语", "通用英语")

SWITCH("C", "A", "优秀", "B", "中等", "C", "普通", "D", "较差", "没有成绩")
=>普通`,
  19: `将多个文本值串联成单个文本值。（其效果等同于 &）

【text1..】是要串联的多个值，可以输入文本、数字、日期参数或者引用列数据。

请用双引号将你要串联的文本值引起来，数字和引用列除外。
特例：如果要串联双引号，你需要使用反斜杠（\\）作为转义字符。`,
  20: `CONCATENATE({姓名}, {年纪}, "岁")

CONCATENATE("\\"", {年纪}, "\\"")`,
  21: `从文本的开头提取多个字符。

【string】是要被提取字符的文本。
【howMany】是提取的字符数量。用数字表示，比如"3"，代表从左到右提取3个字符。`,
  22: `LEFT("极星字段：支持API，随意DIY", 3)
=> 极星字段

LEFT({出生年月}, 4)
=> 1996`,
  23: `从文本的末尾提取出多个字符。

【string】是要被提取字符的文本。
【howMany】是提取的字符数量。用数字表示，比如"5"，代表从右到左提取5个字符。`,
  24: `RIGHT("极星字段：支持API，随意DIY", 5)
=> 极星字段

RIGHT({出生年月}, 5)
=> 12-06`,
  25: `从内容中特定位置提取一段固定长度的文本。

【string】是你输入的一段内容，其中包含了被提取的文本。该内容可以是输入的文本或者引用的极星字段数据。
【whereToSearch】是你指定从哪儿提取文本，用数字表示。比如数字"3"表示从内容的第3个字符开始提取。
【count】是提取的文本长度，用数字表示。比如数字"2"表示从指定位置提取2个字符。`,
  26: `MID("这个苹果又大又圆", 3, 2)
=> 苹果

MID("这个苹果又大又圆", 99, 2)
=> 空值

MID("这个苹果又大又圆", 3, 99)
=> 苹果又大又圆

MID({嘉宾姓名}, 2, 99)
=> 彦祖`,
  27: `将内容中特定位置的一段文本替换为新文本。

【string】是你输入的一段内容，其中包含了被替换的文本。该内容可以是输入的文本或者引用的极星字段数据。
【start_character】是你指定从哪儿替换文本，用数字表示。比如数字"3"表示从内容的第3个字符开始替换。
【number_of_characters】是你指定要替换掉多少个字符，用数字表示。比如数字"2"表示替换掉指定位置的2个字符。
【replacement】是替换原文本的新文本。

（如果你想将内容中所有出现的原文本替换为新文本，请参见SUBSTITUTE。）`,
  28: `REPLACE("这个苹果又大又圆", 3, 2, "桃子")
=> 这个桃子又大又圆

REPLACE("这个苹果又大又圆", 3, 99, "榴莲又香又甜")
=> 这个榴莲又香又甜

REPLACE({嘉宾姓名}, 1, 1, "X")
=> X彦祖`,
  29: `清除文本开头和结尾的空格。

【value】是需要被处理的文本。`,
  30: `TRIM(" 两边空格会被清除! ")
=>两边空格会被清除!`,
  31: `统计一段文本的字符长度。

【string】是要计算长度的文本；标点符号、空格等也会占一个字符。`,
  32: `LEN("你猜猜我有多长？")
=> 8

LEN("a blank")
=> 7`,
  33: `将文本中所有大写字符全部转换为小写字符。

【string】是被转换的文本。`,
  34: `将文本中所有小写字符全部转换为大写字符。

【string】是被转换的文本。`,
  35: `查找特定的文本在内容中第一次出现的位置。

【stringToFind】是要查找到的特定文本。
【whereToSearch】指定从哪段内容内查找文本。可以输入文本参数或者引用极星字段。
【startFromPosition】非必填，指定从内容的哪个位置开始查找（用数字表示第几个字符）。

本函数可以在一大段内容中快速查找特定文本出现的位置。
如果返回数字3，表示文本出现在该内容的第3个字符。
如果未找到匹配的文本，则结果将为0。

其效果与SEARCH()类似，但是未找到匹配项时，SEARCH()返回值为空而不是0。`,
  36: `FIND("苹果", "这个苹果又大又圆，要买两斤苹果吗？")
=> 3

FIND("香蕉", "这个苹果又大又圆，要买两斤苹果吗？")
=> 0

FIND("苹果", "这个苹果又大又圆，买两斤苹果吗？"，10)
=> 13`,
  37: `将文本字符串转换为数字。

【text】表示要转换的文本值。

本函数可以将文本内的数字提取出来。`,
  38: `根据指定次数重复文本。

【string】是需要重复的文本。
【mumber】是指定的重复次数。用数字表示，比如”2“，表示重复2次。`,
  39: `搜索特定的文本在内容中第一次出现的位置。

【stringToFind】是要搜索到的特定文本。
【whereToSearch】指定从哪段内容搜索文本。可以输入文本参数或者引用极星字段。
【startFromPosition】非必填，指定从内容的哪个位置开始搜索（用数字表示第几个字符）。

本函数可以在一大段内容中快速搜索特定文本出现的位置。
如果返回数字3，表示文本出现在该内容的第3个字符。
如果未找到匹配的文本，则结果将为空值。

其效果与FIND()类似，但是未找到匹配项时，FIND()返回值为0而不是空值。`,
  40: `SEARCH("苹果", "这个苹果又大又圆，要买两斤苹果吗？")
=> 3

SEARCH("香蕉", "这个苹果又大又圆，要买两斤苹果吗？")
=> 空值

SEARCH("苹果", "这个苹果又大又圆，买两斤苹果吗？"，10)
=> 13`,
  41: `将内容中特定的文本全部替换为新文本。

【string】是你输入的一段内容，其中包含了被替换的文本。该内容可以是输入的文本或者引用的极星字段数据。
【old_text】要被替换的原文本。
【new_text】替换原文本的新文本。
【index】非必填，是索引号，指定索引号后系统仅会替换特定位置的原文本。

本函数将文本中的原字符替换为新字符，在没有特别声明的情况下，新字符将替换所有出现的原字符。

（如果你想替换指定起点位置和终点位置之间的字符，请参见REPLACE。）`,
  42: `SUBSTITUTE("小胡，小张，小王", "小", "老")
=> 老胡，老张，老王

SUBSTITUTE("小胡，小张，小王", "小", "老", 3)
=> 小胡，老张，小王`,
  43: '数字',
  44: `简介
取数值的绝对值。

参数说明
value：是要对其求绝对值的数值。
绝对值：正数的绝对值是本身，负数的绝对值是去掉负号。`,
  45: `// value > 0
公式：ABS(1.5)
运算结果：1.50

//value = 0
公式：ABS(0)
运算结果：0.00

// value < 0
公式：ABS(-1.5)
运算结果：1.50`,
  46: `返回多个数值的算术平均数。

【number...】是进行运算的数值参数，可以输入数字或引用数值类型的列。数值类型的列包括数字、货币、百分比、评分等。

如果其中某个参数是文本值，比如"八"，在运算时会被当做0。`,
};
